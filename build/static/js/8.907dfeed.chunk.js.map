{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","views/pages/products/case/index.js"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","_s","_i","next","push","length","unsupportedIterableToArray","TypeError","fields","Loading","className","style","height","flexDirection","alignItems","role","width","connect","state","isLoading","loadingIndicator","counter","dispatch","callApi","method","ApiRedux","callApi2","callback","toast","type","message","showNotification","props","useState","cases","setCases","selectedCase","setSelectedCase","visibleView","setVisibleView","fetchCase","a","RestApi","getCase","ok","data","console","log","toggleView","val","useEffect","xs","lg","items","itemsPerPage","pagination","scopedSlots","item","src","image","borderRadius","alt","name","color","power","side","external","internal","price","active","variant","aria-pressed","size","onClick","show","onClose","closeButton","md","action","encType","row","margin","htmlFor","toString","toUpperCase"],"mappings":"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","file":"static/js/8.907dfeed.chunk.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, {useEffect, useState} from 'react'\nimport {connect} from \"react-redux\";\nimport {\n  CButton,\n  CCol,\n  CRow,\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CDataTable,\n  CModal,\n  CModalHeader,\n  CModalTitle,\n  CModalBody,\n  CModalFooter,\n  CForm,\n  CFormGroup,\n  CLabel,\n  CImg,\n} from '@coreui/react'\nimport ApiRedux from '../../../../store/redux/apiRedux';\nimport RestApi from '../../../../store/service/RestApi';\nimport {showNotification} from \"../../../../store/redux/notificationRedux\";\n\nconst fields = ['image', 'name', 'type', 'color', 'power', 'side', 'external', 'internal','price', 'actions'];\n\nconst Loading = () => {\n  return (\n    <div className=\"d-flex justify-content-center\"\n         style={{height: '100vh', flexDirection: 'row', alignItems: 'center'}}>\n      <div className=\"spinner-border text-primary\" role=\"status\" style={{width: 100, height: 100}}>\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    </div>\n  )\n};\n\nconst Case = (props) => {\n  const tag = 'Page::Users';\n  const [cases , setCases] = useState([]);\n  const [selectedCase, setSelectedCase] = useState(null);\n  const [visibleView, setVisibleView] = useState(false);\n\n  const fetchCase = async () => {\n    try {\n      let {ok, data} = await props.callApi(RestApi.getCase);\n      if (ok) {\n        setCases(data.cases);\n        setSelectedCase(data.cases[0]);\n      }\n    } catch (e) {\n      console.log(tag, 'FETCH_USER_ERROR', e.message)\n    }\n  };\n\n  const toggleView = (val) => {\n    setVisibleView(val);\n  };\n\n  const onClickView = (cpu) => {\n    setSelectedCase(cpu);\n    toggleView(true);\n  };\n\n  const onClickAdd = (user) => {\n    setSelectedCase(user);\n  };\n\n  useEffect(() => {\n    fetchCase();\n  }, []);\n\n  return (\n    <>\n      <CRow>\n        <CCol xs=\"12\" lg=\"12\">\n          {props.isLoading === false ?\n            <CCard>\n              <CCardHeader>\n                Cases\n              </CCardHeader>\n              <CCardBody>\n                <CDataTable\n                  items={cases}\n                  fields={fields}\n                  itemsPerPage={10}\n                  pagination\n                  scopedSlots={{\n                    'image':\n                      (item) => (\n                        <td className=\"text-left v-align\">\n                          <div className=\"c-avatar\">\n                            <img src={item.image} className=\"c-avatar-img\" style={{borderRadius: 'none!important'}} alt=\"avatar\"/>\n                          </div>\n                        </td>\n                      ),\n                    'name':\n                      (item) => (\n                        <td className='v-align'>\n                          <div className=\"h6\">\n                            {item.name}\n                          </div>\n                        </td>\n                      ),\n                    'type':\n                      (item) => (\n                        <td className='v-align'>\n                          <div className=\"h6\">\n                            {item.type}\n                          </div>\n                        </td>\n                      ),\n                    'color':\n                      (item) => (\n                        <td className='v-align'>\n                          <div className=\"h6\">\n                            {item.color}\n                          </div>\n                        </td>\n                      ),\n                    'power':\n                      (item) => (\n                        <td className='v-align'>\n                          <div className=\"h6\">\n                            {item.power}\n                          </div>\n                        </td>\n                      ),\n                    'window':\n                      (item) => (\n                        <td className='v-align'>\n                          <div className=\"h6\">\n                            {item.side}\n                          </div>\n                        </td>\n                      ),\n                    'external':\n                      (item) => (\n                        <td className='v-align'>\n                          <div className=\"h6\">\n                            {item.external}\n                          </div>\n                        </td>\n                      ),\n                    'internal':\n                      (item) => (\n                        <td className='v-align'>\n                          <div className=\"h6\">\n                            {item.internal}\n                          </div>\n                        </td>\n                      ),\n                    'price':\n                      (item) => (\n                        <td className='v-align'>\n                          <div className=\"h6\">\n                            {item.price}\n                          </div>\n                        </td>\n                      ),\n                    'actions':\n                      (item) => (\n                        <td className='v-align'>\n                          <CButton active variant=\"ghost\" color=\"info\" aria-pressed=\"true\" size=\"sm\"\n                                   className={\"btn-pill\"} onClick={() => onClickView(item)}>View</CButton>&nbsp;\n                          <CButton active variant=\"ghost\" color=\"success\" aria-pressed=\"true\" size=\"sm\"\n                                   className={\"btn-pill\"} onClick={() => onClickAdd(item)}>Add</CButton>&nbsp;\n                        </td>\n                      )\n\n                  }}\n                />\n              </CCardBody>\n            </CCard>\n            :\n            <Loading/>}\n        </CCol>\n      </CRow>\n      {selectedCase &&\n      <>\n        <CModal\n          show={visibleView}\n          onClose={() => toggleView(false)}\n          size=\"xl\"\n          color={\"info\"}\n        >\n          <CModalHeader closeButton>\n            <CModalTitle>{selectedCase.name}</CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            <CRow>\n              <CCol xs=\"12\" md=\"12\">\n                <CCard>\n                  <CCardBody>\n                    <CForm action=\"\" method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\n                      <CFormGroup row>\n                        <CCol xs=\"12\" md=\"12\">\n                          <div style={{width: 200, height: 200, margin: 'auto'}}>\n                            <CImg\n                              src={selectedCase.image}\n                              className=\"c-avatar-img\"\n                              style={{borderRadius: '0!important'}}\n                              alt={selectedCase.image}\n                            />\n                          </div>\n                        </CCol>\n                      </CFormGroup>\n                      <CFormGroup row>\n                        <CCol xs=\"6\" className=\"text-left text-lg-right\">\n                          <CLabel htmlFor=\"text-input\">Name</CLabel>\n                        </CCol>\n                        <CCol xs=\"6\" >\n                          <p className=\"form-control-static\">{selectedCase.name.toString().toUpperCase()}</p>\n                        </CCol>\n                      </CFormGroup>\n                      <CFormGroup row>\n                        <CCol xs=\"6\" className=\"text-left text-lg-right\">\n                          <CLabel htmlFor=\"password-input\">Type</CLabel>\n                        </CCol>\n                        <CCol xs=\"6\" >\n                          <p className=\"form-control-static\">{selectedCase.type}</p>\n                        </CCol>\n                      </CFormGroup>\n                      <CFormGroup row>\n                        <CCol xs=\"6\" className=\"text-left text-lg-right\">\n                          <CLabel htmlFor=\"password-input\">Color</CLabel>\n                        </CCol>\n                        <CCol xs=\"6\" >\n                          <p\n                            className=\"form-control-static\">{selectedCase.color}\n                            </p>\n                        </CCol>\n                      </CFormGroup>\n                      <CFormGroup row>\n                        <CCol xs=\"6\" className=\"text-left text-lg-right\">\n                          <CLabel htmlFor=\"password-input\">Power Supply</CLabel>\n                        </CCol>\n                        <CCol xs=\"6\" >\n                          <p className=\"form-control-static\">{selectedCase.power}</p>\n                        </CCol>\n                      </CFormGroup>\n                      <CFormGroup row>\n                        <CCol xs=\"6\" className=\"text-left text-lg-right\">\n                          <CLabel htmlFor=\"password-input\">Side Panel Window</CLabel>\n                        </CCol>\n                        <CCol xs=\"6\" >\n                          <p className=\"form-control-static\">{selectedCase.side}</p>\n                        </CCol>\n                      </CFormGroup>\n                      <CFormGroup row>\n                        <CCol xs=\"6\" className=\"text-left text-lg-right\">\n                          <CLabel htmlFor=\"password-input\">External 5.25\" Bays</CLabel>\n                        </CCol>\n                        <CCol xs=\"6\" >\n                          <p className=\"form-control-static\">{selectedCase.external}</p>\n                        </CCol>\n                      </CFormGroup>\n                      <CFormGroup row>\n                        <CCol xs=\"6\" className=\"text-left text-lg-right\">\n                          <CLabel htmlFor=\"password-input\">Internal 3.5\" Bays</CLabel>\n                        </CCol>\n                        <CCol xs=\"6\" >\n                          <p className=\"form-control-static\">{selectedCase.internal}</p>\n                        </CCol>\n                      </CFormGroup>\n                      <CFormGroup row>\n                        <CCol xs=\"6\" className=\"text-left text-lg-right\">\n                          <CLabel htmlFor=\"password-input\">Price</CLabel>\n                        </CCol>\n                        <CCol xs=\"6\" >\n                          <p className=\"form-control-static\">{selectedCase.price}</p>\n                        </CCol>\n                      </CFormGroup>\n                    </CForm>\n                  </CCardBody>\n                </CCard>\n              </CCol>\n            </CRow>\n          </CModalBody>\n          <CModalFooter>\n            <CButton color=\"info\" onClick={() => toggleView(false)}>Close</CButton>\n          </CModalFooter>\n        </CModal>\n      </>}\n\n    </>\n  )\n};\n\nexport default connect(\n  (state) => ({\n    isLoading: state.loadingIndicator.counter === 1,\n  }),\n  (dispatch) => ({\n    callApi: (method, ...args) => new Promise((resolve, reject) => {\n      dispatch(ApiRedux.callApi(method, resolve, ...args), reject)\n    }),\n    callApi2: (method, callback, ...args) => dispatch(ApiRedux.callApi(method, callback, ...args)),\n    toast: (type, message) => dispatch(showNotification(type, message))\n  })\n)(Case)\n"],"sourceRoot":""}