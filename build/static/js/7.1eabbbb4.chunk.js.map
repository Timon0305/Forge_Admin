{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","views/pages/login/Login.js"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","_s","_i","next","push","length","unsupportedIterableToArray","TypeError","connect","state","isLoggingIn","auth","dispatch","login","email","password","toast","type","message","showNotification","props","useState","setEmail","setPassword","handleSubscribe","a","e","name","errors","Type","ERROR","handleKeyPress","event","console","log","isAuthenticated","className","md","sd","placeholder","autoComplete","onChange","target","onKeyPress","xs","color","onClick","to"],"mappings":"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","file":"static/js/7.1eabbbb4.chunk.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState} from 'react'\nimport {  connect} from \"react-redux\";\nimport { Redirect} from 'react-router-dom'\nimport {CButton, CCard, CCardBody, CCardGroup, CCol, CContainer,CForm, CInput, CInputGroup, CInputGroupPrepend, CInputGroupText, CRow} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport {login} from '../../../store/redux/authRedux'\nimport {showNotification} from \"../../../store/redux/notificationRedux\";\nimport {Type} from \"../../../constants/Notifications\";\n\n// const validator = object().shape({\n//   email: string()\n//     .required({message: 'Please enter email'})\n//     .email({message: 'Please enter a valid email'}),\n//   password: string()\n//     .required({message: 'Please enter password'})\n// });\n\nconst tag = 'Login';\nconst Login = (props) => {\n  // const dispatch = useDispatch();\n  const [email, setEmail] = useState('admin@admin.com');\n  const [password, setPassword] = useState('admin123456');\n\n\n  const onChangeEmail = (event) => {\n    setEmail(event.target.value)\n  };\n\n  const onChangePassword = (event) => {\n    setPassword(event.target.value)\n  };\n\n  const handleSubscribe = async () => {\n    try {\n      // const params = await validator.validate({email: email, password: password}, {abortEarly: false});\n\n      props.login(email, password)\n\n    } catch (e) {\n      let message = `${e.name}: `;\n      if (e.errors) {\n        message += `${e.errors[0].message}`\n\n      }\n      props.toast(Type.ERROR, message);\n    }\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === \"Enter\") {\n      handleSubscribe();\n    }\n  };\n\n  console.log(tag, 'auth', props.auth);\n\n  if (props.auth.isAuthenticated !== true) {\n    return (\n      <div className=\"c-app c-default-layout flex-row align-items-center\">\n        <CContainer>\n          <CRow className=\"justify-content-center\">\n            <CCol md=\"6\" sd=\"6\">\n              <CCardGroup>\n                <CCard className=\"p-4\">\n                  <CCardBody>\n                    <CForm>\n                      <h1>ForgePC Admin</h1>\n                      <p className=\"text-muted\">Sign in as Admin</p>\n                      <CInputGroup className=\"mb-3\">\n                        <CInputGroupPrepend>\n                          <CInputGroupText>\n                            <CIcon name=\"cil-user\"/>\n                          </CInputGroupText>\n                        </CInputGroupPrepend>\n                        <CInput type=\"text\" placeholder=\"Email\" autoComplete=\"email\" value={email}\n                                onChange={onChangeEmail} onKeyPress={handleKeyPress}/>\n                      </CInputGroup>\n                      <CInputGroup className=\"mb-4\">\n                        <CInputGroupPrepend>\n                          <CInputGroupText>\n                            <CIcon name=\"cil-lock-locked\"/>\n                          </CInputGroupText>\n                        </CInputGroupPrepend>\n                        <CInput type=\"password\" placeholder=\"Password\" autoComplete=\"current-password\" value={password}\n                                onChange={onChangePassword} onKeyPress={handleKeyPress}/>\n                      </CInputGroup>\n                      <CRow>\n                        <CCol xs=\"6\">\n                          <CButton color=\"primary\" className=\"px-4\" onClick={handleSubscribe}>Login</CButton>\n                        </CCol>\n                        <CCol xs=\"6\" className=\"text-right\">\n                          <CButton color=\"link\" className=\"px-0\">Forgot password?</CButton>\n                        </CCol>\n                      </CRow>\n                    </CForm>\n                  </CCardBody>\n                </CCard>\n              </CCardGroup>\n            </CCol>\n          </CRow>\n        </CContainer>\n      </div>\n    )\n  } else {\n    return (<Redirect to={\"/\"}/>)\n  }\n};\n\nexport default connect(\n  (state) => ({\n    isLoggingIn: state.auth.isLoggingIn || false,\n    auth: state.auth,\n  }),\n  (dispatch) => ({\n    login: (email, password) => dispatch(login(email, password)),\n    toast: (type, message) => dispatch(showNotification(type, message))\n  })\n)(Login)\n"],"sourceRoot":""}