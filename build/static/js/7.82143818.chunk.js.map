{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","store/list/actions.js","views/pages/products/cpu/index.js"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","_s","_i","next","push","length","unsupportedIterableToArray","TypeError","addToList","product","console","log","type","ADD_TO_LIST","payload","fields","Loading","className","style","height","flexDirection","alignItems","role","width","connect","state","isLoading","loadingIndicator","counter","dispatch","callApi","method","ApiRedux","callApi2","callback","toast","message","showNotification","props","useDispatch","useState","cpu","setCpu","listProduct","setListProduct","selectedCPU","setSelectedCPU","visibleView","setVisibleView","fetchCpu","a","RestApi","getCPU","ok","data","getListProduct","products","JSON","parse","sessionStorage","getItem","e","toggleView","val","useEffect","xs","lg","items","itemsPerPage","pagination","scopedSlots","item","src","image","borderRadius","alt","name","coreCount","coreClock","boostClock","graphics","smt","tdp","price","active","variant","color","aria-pressed","size","onClick","onClickView","component","foundIndex","findIndex","x","setItem","stringify","history","onClickAdd","show","onClose","closeButton","md","action","encType","row","margin","htmlFor","toString","toUpperCase"],"mappings":"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","file":"static/js/7.82143818.chunk.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import {ADD_TO_LIST} from \"./actionTypes\";\n\nexport const addToList = (product) => {\n  console.log('action', product)\n  return {\n    type: ADD_TO_LIST,\n    payload: { product }\n  }\n};\n","import React, {useEffect, useState} from 'react'\nimport {connect, useDispatch} from \"react-redux\";\nimport {\n  CButton,\n  CCol,\n  CRow,\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CDataTable,\n  CModal,\n  CModalHeader,\n  CModalTitle,\n  CModalBody,\n  CModalFooter,\n  CForm,\n  CFormGroup,\n  CLabel,\n  CImg,\n} from '@coreui/react'\nimport ApiRedux from '../../../../store/redux/apiRedux';\nimport {addToList} from '../../../../store/list/actions'\nimport RestApi from '../../../../store/service/RestApi';\nimport {showNotification} from \"../../../../store/redux/notificationRedux\";\n\nconst fields = ['image', 'name', 'coreCount', 'coreClock', 'boostClock', 'graphics', 'smt', 'tdp','price', 'actions'];\n\nconst Loading = () => {\n  return (\n    <div className=\"d-flex justify-content-center\"\n         style={{height: '100vh', flexDirection: 'row', alignItems: 'center'}}>\n      <div className=\"spinner-border text-primary\" role=\"status\" style={{width: 100, height: 100}}>\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    </div>\n  )\n};\n\nconst CPU = (props) => {\n  const dispatch = useDispatch();\n  const tag = 'Page::Users';\n  const [cpu, setCpu] = useState([]);\n  const [listProduct, setListProduct] = useState([]);\n  const [selectedCPU, setSelectedCPU] = useState(null);\n  const [visibleView, setVisibleView] = useState(false);\n\n  const fetchCpu = async () => {\n    try {\n      let {ok, data} = await props.callApi(RestApi.getCPU);\n      if (ok) {\n        setCpu(data.cpu);\n        setSelectedCPU(data.cpu[0]);\n      }\n    } catch (e) {\n      console.log(tag, 'FETCH_USER_ERROR', e.message)\n    }\n  };\n\n  const getListProduct = async () => {\n    try {\n      let products = JSON.parse(sessionStorage.getItem('listItem')) === null\n      ? []: JSON.parse(sessionStorage.getItem('listItem'));\n      setListProduct(products)\n    } catch (e) {\n      console.log('Get list products', e.message)\n    }\n  };\n\n  const toggleView = (val) => {\n    setVisibleView(val);\n  };\n\n  const onClickView = (cpu) => {\n    setSelectedCPU(cpu);\n    toggleView(true);\n  };\n\n  const onClickAdd = (item) => {\n    let newComponent = 'cpu';\n    if (listProduct.length === 0) {\n        item.component = newComponent;\n        listProduct.push(item)\n    } else {\n        let foundIndex = listProduct.findIndex(x => x.component === newComponent);\n        if (foundIndex === -1) {\n          item.component = newComponent;\n          listProduct.push(item)\n        } else {\n          item.component = newComponent;\n          listProduct[foundIndex] = item;\n        }\n    }\n    sessionStorage.setItem('listItems', JSON.stringify(listProduct));\n    dispatch(addToList(listProduct));\n    props.history.push('/list')\n  };\n\n  useEffect(() => {\n    fetchCpu();\n    getListProduct()\n  }, []);\n\n  return (\n    <>\n      <CRow>\n        <CCol xs=\"12\" lg=\"12\">\n          {props.isLoading === false ?\n            <CCard>\n              <CCardHeader>\n                CPU\n              </CCardHeader>\n              <CCardBody>\n                <CDataTable\n                  items={cpu}\n                  fields={fields}\n                  itemsPerPage={10}\n                  pagination\n                  scopedSlots={{\n                    'image':\n                      (item) => (\n                        <td className=\"text-left v-align\">\n                          <div className=\"c-avatar\">\n                            <img src={item.image} className=\"c-avatar-img\" style={{borderRadius: 'none!important'}} alt=\"avatar\"/>\n                          </div>\n                        </td>\n                      ),\n                    'name':\n                      (item) => (\n                        <td className='v-align'>\n                          <div className=\"h6\">\n                            {item.name}\n                          </div>\n                        </td>\n                      ),\n                    'coreCount':\n                      (item) => (\n                        <td className='v-align'>\n                          <div className=\"h6\">\n                            {item.coreCount}\n                          </div>\n                        </td>\n                      ),\n                    'coreClock':\n                      (item) => (\n                        <td className='v-align'>\n                          <div className=\"h6\">\n                            {item.coreClock}\n                          </div>\n                        </td>\n                      ),\n                    'boostClock':\n                      (item) => (\n                        <td className='v-align'>\n                          <div className=\"h6\">\n                            {item.boostClock}\n                          </div>\n                        </td>\n                      ),\n                    'graphics':\n                      (item) => (\n                        <td className='v-align'>\n                          <div className=\"h6\">\n                            {item.graphics}\n                          </div>\n                        </td>\n                      ),\n                    'smt':\n                      (item) => (\n                        <td className='v-align'>\n                          <div className=\"h6\">\n                            {item.smt}\n                          </div>\n                        </td>\n                      ),\n                    'tdp':\n                      (item) => (\n                        <td className='v-align'>\n                          <div className=\"h6\">\n                            {item.tdp}\n                          </div>\n                        </td>\n                      ),\n                    'price':\n                      (item) => (\n                        <td className='v-align'>\n                          <div className=\"h6\">\n                            {item.price}\n                          </div>\n                        </td>\n                      ),\n                    'actions':\n                      (item) => (\n                        <td className='v-align'>\n                          <CButton active variant=\"ghost\" color=\"info\" aria-pressed=\"true\" size=\"sm\"\n                                   className={\"btn-pill\"} onClick={() => onClickView(item)}>View</CButton>&nbsp;\n                          <CButton active variant=\"ghost\" color=\"success\" aria-pressed=\"true\" size=\"sm\"\n                                   className={\"btn-pill\"} onClick={() => onClickAdd(item)}>Add</CButton>&nbsp;\n                        </td>\n                      )\n\n                  }}\n                />\n              </CCardBody>\n            </CCard>\n            :\n            <Loading/>}\n        </CCol>\n      </CRow>\n      {selectedCPU &&\n      <>\n        <CModal\n          show={visibleView}\n          onClose={() => toggleView(false)}\n          size=\"lg\"\n          color={\"info\"}\n        >\n          <CModalHeader closeButton>\n            <CModalTitle>{selectedCPU.name}</CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            <CRow>\n              <CCol xs=\"12\" md=\"12\">\n                <CCard>\n                  <CCardBody>\n                    <CForm action=\"\" method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\n                      <CFormGroup row>\n                        <CCol xs=\"12\" md=\"12\">\n                          <div style={{width: 200, height: 200, margin: 'auto'}}>\n                            <CImg\n                              src={selectedCPU.image}\n                              className=\"c-avatar-img\"\n                              style={{borderRadius: '0!important'}}\n                              alt={selectedCPU.image}\n                            />\n                          </div>\n                        </CCol>\n                      </CFormGroup>\n                      <CFormGroup row>\n                        <CCol xs=\"6\" className=\"text-left text-lg-right\">\n                          <CLabel htmlFor=\"text-input\">Name</CLabel>\n                        </CCol>\n                        <CCol xs=\"6\" >\n                          <p className=\"form-control-static\">{selectedCPU.name.toString().toUpperCase()}</p>\n                        </CCol>\n                      </CFormGroup>\n                      <CFormGroup row>\n                        <CCol xs=\"6\" className=\"text-left text-lg-right\">\n                          <CLabel htmlFor=\"password-input\">Core Count</CLabel>\n                        </CCol>\n                        <CCol xs=\"6\" >\n                          <p className=\"form-control-static\">{selectedCPU.coreCount}</p>\n                        </CCol>\n                      </CFormGroup>\n                      <CFormGroup row>\n                        <CCol xs=\"6\" className=\"text-left text-lg-right\">\n                          <CLabel htmlFor=\"password-input\">Core Clock</CLabel>\n                        </CCol>\n                        <CCol xs=\"6\" >\n                          <p\n                            className=\"form-control-static\">{selectedCPU.coreClock}\n                            </p>\n                        </CCol>\n                      </CFormGroup>\n                      <CFormGroup row>\n                        <CCol xs=\"6\" className=\"text-left text-lg-right\">\n                          <CLabel htmlFor=\"password-input\">Boost Clock</CLabel>\n                        </CCol>\n                        <CCol xs=\"6\" >\n                          <p className=\"form-control-static\">{selectedCPU.boostClock}</p>\n                        </CCol>\n                      </CFormGroup>\n                      <CFormGroup row>\n                        <CCol xs=\"6\" className=\"text-left text-lg-right\">\n                          <CLabel htmlFor=\"password-input\">TDP</CLabel>\n                        </CCol>\n                        <CCol xs=\"6\" >\n                          <p className=\"form-control-static\">{selectedCPU.tdp}</p>\n                        </CCol>\n                      </CFormGroup>\n                      <CFormGroup row>\n                        <CCol xs=\"6\" className=\"text-left text-lg-right\">\n                          <CLabel htmlFor=\"password-input\">Integrated Graphics</CLabel>\n                        </CCol>\n                        <CCol xs=\"6\" >\n                          <p className=\"form-control-static\">{selectedCPU.graphics}</p>\n                        </CCol>\n                      </CFormGroup>\n                      <CFormGroup row>\n                        <CCol xs=\"6\" className=\"text-left text-lg-right\">\n                          <CLabel htmlFor=\"password-input\">SMT</CLabel>\n                        </CCol>\n                        <CCol xs=\"6\" >\n                          <p className=\"form-control-static\">{selectedCPU.smt}</p>\n                        </CCol>\n                      </CFormGroup>\n                      <CFormGroup row>\n                        <CCol xs=\"6\" className=\"text-left text-lg-right\">\n                          <CLabel htmlFor=\"password-input\">Price</CLabel>\n                        </CCol>\n                        <CCol xs=\"6\" >\n                          <p className=\"form-control-static\">{selectedCPU.price}</p>\n                        </CCol>\n                      </CFormGroup>\n                    </CForm>\n                  </CCardBody>\n                </CCard>\n              </CCol>\n            </CRow>\n          </CModalBody>\n          <CModalFooter>\n            <CButton color=\"info\" onClick={() => toggleView(false)}>Close</CButton>\n          </CModalFooter>\n        </CModal>\n      </>}\n\n    </>\n  )\n};\n\nexport default connect(\n  (state) => ({\n    isLoading: state.loadingIndicator.counter === 1,\n  }),\n  (dispatch) => ({\n    callApi: (method, ...args) => new Promise((resolve, reject) => {\n      dispatch(ApiRedux.callApi(method, resolve, ...args), reject)\n    }),\n    callApi2: (method, callback, ...args) => dispatch(ApiRedux.callApi(method, callback, ...args)),\n    toast: (type, message) => dispatch(showNotification(type, message))\n  })\n)(CPU)\n"],"sourceRoot":""}